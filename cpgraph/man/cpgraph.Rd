% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_classes.R
\name{cpgraph}
\alias{cpgraph}
\title{R6 class \code{cpgraph}}
\description{
A cpgraph object is a data matrix along with information about the recursive
application of the detection method.
}
\examples{

## ------------------------------------------------
## Method `cpgraph$changedetect`
## ------------------------------------------------

p = 50; n1 = 500; n2 = 500; t01 = 0.2; t02 = 0.6
params1 = gen_param(p = p)
params2 = gen_param(p = p)
sig1 = params1$pre_cov; sig2 = params1$post_cov
sig3 = params2$pre_cov; sig4 = params2$post_cov
x = gen_data(n = n1, p = p, t0 = t01, sig1, sig2)$data
y = gen_data(n = n2, p = p, t0 = t02, sig3, sig4)$data
data = rbind(x, y)
dat = cpgraph$new()
dat$data = data
dat
dat$bin_seg_std(1, n)
dat
}
\author{
Konstantinos Tsampourakis <kostas.tsampourakis@gmail.com>
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{data}}{A n by p matrix of observations.}

\item{\code{type}}{The type of the change detection.}

\item{\code{run_flag}}{A boolean flag denoting whether binary segmentation has been
applied.}

\item{\code{cp_declared}}{A vector of detected changepoints.}

\item{\code{cp_generation}}{The generation of detected changepoints on the binary.
tree}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-print}{\code{cpgraph$print()}}
\item \href{#method-changedetect}{\code{cpgraph$changedetect()}}
\item \href{#method-clone}{\code{cpgraph$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print method for cpgraph object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cpgraph$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Object of class cpgraph.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-changedetect"></a>}}
\if{latex}{\out{\hypertarget{method-changedetect}{}}}
\subsection{Method \code{changedetect()}}{
Finds changepoint estimates by recursively applying the split, fit
and minimize procedure.

The \code{bic_const} threshold parameter increases as recursion moves deeper
at a rate proportional to n / (e - s) to avoid false positives due to small
sample size.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cpgraph$changedetect(
  s = NULL,
  e = NULL,
  edge = 0.05,
  lambda_vec = NULL,
  length_lam = 50,
  lam_sep = 1.75,
  par = F,
  cv = 5,
  bic_const = 0.25,
  NumCores = 4,
  start_grid = 0.5,
  l_end = 2,
  gen = 0
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{s}}{Starting point of segment}

\item{\code{e}}{Endpoint of segment}

\item{\code{edge}}{Percentage of throaway data from the edges.}

\item{\code{lambda_vec}}{A grid of values of the regularization parameter to be used
for cross-validation.}

\item{\code{length_lam}}{Length of grid.}

\item{\code{lam_sep}}{Numeric value. Used in the regularizer grid if not provided by
the user.}

\item{\code{par}}{If TRUE parallelization of the lasso estimation is performed.}

\item{\code{cv}}{Number of cross-validation folds.}

\item{\code{bic_const}}{Penalty used in the BIC evaluation.}

\item{\code{NumCores}}{Number of processor cores to be used}

\item{\code{start_grid}}{Grid of values for the initial split location}

\item{\code{l_end}}{End value of the lambda sequence}

\item{\code{gen}}{A counter for the depth of recursion}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{p = 50; n1 = 500; n2 = 500; t01 = 0.2; t02 = 0.6
params1 = gen_param(p = p)
params2 = gen_param(p = p)
sig1 = params1$pre_cov; sig2 = params1$post_cov
sig3 = params2$pre_cov; sig4 = params2$post_cov
x = gen_data(n = n1, p = p, t0 = t01, sig1, sig2)$data
y = gen_data(n = n2, p = p, t0 = t02, sig3, sig4)$data
data = rbind(x, y)
dat = cpgraph$new()
dat$data = data
dat
dat$bin_seg_std(1, n)
dat
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cpgraph$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
